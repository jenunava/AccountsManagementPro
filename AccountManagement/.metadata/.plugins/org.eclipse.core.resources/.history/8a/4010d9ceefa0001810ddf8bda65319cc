package com.UserStock.controller;
 
import java.util.List;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod; 
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.UserStock.model.Stock;
import com.UserStock.model.User;
import com.UserStock.service.UserStocksInventoryService; 
 
/**
 * This is the UserStock controller class
 * @author jnavamshan
 *
 */
@RestController
public class UserStocksInventoryController {
 
    @Autowired
    UserStocksInventoryService userStocksInventoryService; 
 
    /**
     * Retrieve all User
     * @return all user
     */     
	@RequestMapping(value = "/users/", method = RequestMethod.GET)
	public ResponseEntity<List<User>> listAllUser() {
		List<User> users = userStocksInventoryService.findAllUser();
		if (users.isEmpty()) {
			return new ResponseEntity<List<User>>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<List<User>>(users, HttpStatus.OK);
	}


	/**
     * Retrieve Single User
     * @param id is the users id 
     * @return Response - Single User
     */
	@RequestMapping(value = "/users/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<User> getUser(@PathVariable("id") int id) {
		System.out.println("Fetching User wit id " + id);
		User user = userStocksInventoryService.findUser(id); 
		if (user == null) {
			System.out.println("User with user id " + id + " not found");
			return new ResponseEntity<User>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<User>(user, HttpStatus.OK);
	}
     
     
    /**
     * Create a User
     * @param user is the User to be created
     * @param ucBuilder is the URI Component builder
     * @return  Response - void
     */
	@RequestMapping(value = "/users/", method = RequestMethod.POST)
	public ResponseEntity<Void> createUser(@RequestBody User user, UriComponentsBuilder ucBuilder) { 
		userStocksInventoryService.createNewUser(user);
		HttpHeaders headers = new HttpHeaders();
		headers.setLocation(ucBuilder.path("/users/{id}").buildAndExpand(user.getUserId()).toUri());
		return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
	}
	
	 /**
     * Create bulk User
     * @param users is the Users to be created
     * @param ucBuilder is the URI Component builder
     * @return  Response - void
     */
	@RequestMapping(value = "/users/bulkCreate/", method = RequestMethod.POST)
	public ResponseEntity<Void> createBulkUsers(@RequestBody List<User> users, UriComponentsBuilder ucBuilder) {  
		users.forEach(user -> userStocksInventoryService.createNewUser(user)); 
		return new ResponseEntity<Void>(HttpStatus.CREATED);
	}
 
     
    /**
     * Update a User
     * @param id is the user id of the User which to be updated
     * @param user to be updated
     * @return Response - User
     */
    @RequestMapping(value = "/users/{id}", method = RequestMethod.PUT)
	public ResponseEntity<User> updateUser(@PathVariable("id") int id, @RequestBody User user) {
    	User currentUser = userStocksInventoryService.findUser(id); 

		if (currentUser == null) {
			System.out.println("User with id " + id + " not found");
			return new ResponseEntity<User>(HttpStatus.NOT_FOUND);
		} 
		if(!isEmpty(user.getFirstName())){currentUser.setFirstName(user.getFirstName());}
		if(!isEmpty(user.getLastName())){currentUser.setLastName(user.getLastName());}
		if(!isEmpty(user.getAddress())){currentUser.setAddress(user.getAddress());}
		if(!isEmpty(user.getPhone())){currentUser.setPhone(user.getPhone());} 

		userStocksInventoryService.updateUser(currentUser);
		return new ResponseEntity<User>(currentUser, HttpStatus.OK);
	} 


	private boolean isEmpty(String string) { 
		return string == null ||  string.isEmpty();
	}


	/**
     * Delete a User
     * @param id is the account id of the User account which to be deleted
     * @return Response - User
     */
	@RequestMapping(value = "/users/{id}", method = RequestMethod.DELETE)
	public ResponseEntity<User> deleteUser(@PathVariable("id") int id) { 

		User user = userStocksInventoryService.findUser(id); 
		if (user == null) {
			System.out.println("Unable to delete. User with id " + id + " not found");
			return new ResponseEntity<User>(HttpStatus.NOT_FOUND);
		}

		userStocksInventoryService.deleteUser(user);
		return new ResponseEntity<User>(HttpStatus.NO_CONTENT);
	}
 
	
	
	/**
     * Retrieve all Stocks
     * @return all Stocks
     */     
	@RequestMapping(value = "/stocks/", method = RequestMethod.GET)
	public ResponseEntity<List<Stock>> listAllStock() {
		List<Stock> stocks = userStocksInventoryService.findAllStock();
		if (stocks.isEmpty()) {
			return new ResponseEntity<List<Stock>>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<List<Stock>>(stocks, HttpStatus.OK);
	}
   
    
}